{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Documents\\\\WebDev\\\\CryptoPedia\\\\crypto-pedia\\\\src\\\\Components\\\\Authentication\\\\Signup.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, TextField } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signup = _ref => {\n  _s();\n\n  let {\n    handleClose\n  } = _ref;\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const {\n    setAlert\n  } = CryptoState();\n\n  const handleSubmit = async () => {\n    if (password !== confirmPassword) {\n      setAlert({\n        open: true,\n        message: \"Passwords do not match\",\n        type: \"error\"\n      });\n      return;\n    }\n\n    try {\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      setAlert({\n        open: true,\n        message: `Sign Up Successful. Welcome ${result.user.email}`,\n        type: \"success\"\n      });\n      handleClose();\n    } catch (error) {\n      setAlert({\n        open: true,\n        message: error.message,\n        type: \"error\"\n      });\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 3,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      type: \"email\",\n      label: \"Enter Email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      label: \"Enter Password\",\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      label: \"Confirm Password\",\n      type: \"password\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      size: \"large\",\n      style: {\n        backgroundColor: \"#EEBC1D\"\n      },\n      onClick: handleSubmit,\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"MT1soXlHw5oVJwENzJZGMb+nqNE=\");\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["Box","Button","TextField","useState","CryptoState","createUserWithEmailAndPassword","auth","Signup","handleClose","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","setAlert","handleSubmit","open","message","type","result","user","error","display","flexDirection","gap","e","target","value","backgroundColor"],"sources":["C:/Users/abhis/Documents/WebDev/CryptoPedia/crypto-pedia/src/Components/Authentication/Signup.js"],"sourcesContent":["import { Box, Button, TextField } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { CryptoState } from \"../../CryptoContext\";\r\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { auth } from \"../../firebase\";\r\n\r\nconst Signup = ({ handleClose }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const { setAlert } = CryptoState();\r\n\r\n  const handleSubmit = async () => {\r\n    if (password !== confirmPassword) {\r\n      setAlert({\r\n        open: true,\r\n        message: \"Passwords do not match\",\r\n        type: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      setAlert({\r\n        open: true,\r\n        message: `Sign Up Successful. Welcome ${result.user.email}`,\r\n        type: \"success\",\r\n      });\r\n\r\n      handleClose();\r\n    } catch (error) {\r\n      setAlert({\r\n        open: true,\r\n        message: error.message,\r\n        type: \"error\",\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      p={3}\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: \"20px\",\r\n      }}\r\n    >\r\n      <TextField\r\n        variant=\"outlined\"\r\n        type=\"email\"\r\n        label=\"Enter Email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        variant=\"outlined\"\r\n        label=\"Enter Password\"\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        variant=\"outlined\"\r\n        label=\"Confirm Password\"\r\n        type=\"password\"\r\n        value={confirmPassword}\r\n        onChange={(e) => setConfirmPassword(e.target.value)}\r\n        fullWidth\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        style={{ backgroundColor: \"#EEBC1D\" }}\r\n        onClick={handleSubmit}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Signup;"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,mBAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,8BAAT,QAA+C,eAA/C;AACA,SAASC,IAAT,QAAqB,gBAArB;;;AAEA,MAAMC,MAAM,GAAG,QAAqB;EAAA;;EAAA,IAApB;IAAEC;EAAF,CAAoB;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;EAEA,MAAM;IAAEY;EAAF,IAAeX,WAAW,EAAhC;;EAEA,MAAMY,YAAY,GAAG,YAAY;IAC/B,IAAIL,QAAQ,KAAKE,eAAjB,EAAkC;MAChCE,QAAQ,CAAC;QACPE,IAAI,EAAE,IADC;QAEPC,OAAO,EAAE,wBAFF;QAGPC,IAAI,EAAE;MAHC,CAAD,CAAR;MAKA;IACD;;IAED,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMf,8BAA8B,CACjDC,IADiD,EAEjDG,KAFiD,EAGjDE,QAHiD,CAAnD;MAKAI,QAAQ,CAAC;QACPE,IAAI,EAAE,IADC;QAEPC,OAAO,EAAG,+BAA8BE,MAAM,CAACC,IAAP,CAAYZ,KAAM,EAFnD;QAGPU,IAAI,EAAE;MAHC,CAAD,CAAR;MAMAX,WAAW;IACZ,CAbD,CAaE,OAAOc,KAAP,EAAc;MACdP,QAAQ,CAAC;QACPE,IAAI,EAAE,IADC;QAEPC,OAAO,EAAEI,KAAK,CAACJ,OAFR;QAGPC,IAAI,EAAE;MAHC,CAAD,CAAR;MAKA;IACD;EACF,CA/BD;;EAiCA,oBACE,QAAC,GAAD;IACE,CAAC,EAAE,CADL;IAEE,KAAK,EAAE;MACLI,OAAO,EAAE,MADJ;MAELC,aAAa,EAAE,QAFV;MAGLC,GAAG,EAAE;IAHA,CAFT;IAAA,wBAQE,QAAC,SAAD;MACE,OAAO,EAAC,UADV;MAEE,IAAI,EAAC,OAFP;MAGE,KAAK,EAAC,aAHR;MAIE,KAAK,EAAEhB,KAJT;MAKE,QAAQ,EAAGiB,CAAD,IAAOhB,QAAQ,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAL3B;MAME,SAAS;IANX;MAAA;MAAA;MAAA;IAAA,QARF,eAgBE,QAAC,SAAD;MACE,OAAO,EAAC,UADV;MAEE,KAAK,EAAC,gBAFR;MAGE,IAAI,EAAC,UAHP;MAIE,KAAK,EAAEjB,QAJT;MAKE,QAAQ,EAAGe,CAAD,IAAOd,WAAW,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAL9B;MAME,SAAS;IANX;MAAA;MAAA;MAAA;IAAA,QAhBF,eAwBE,QAAC,SAAD;MACE,OAAO,EAAC,UADV;MAEE,KAAK,EAAC,kBAFR;MAGE,IAAI,EAAC,UAHP;MAIE,KAAK,EAAEf,eAJT;MAKE,QAAQ,EAAGa,CAAD,IAAOZ,kBAAkB,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CALrC;MAME,SAAS;IANX;MAAA;MAAA;MAAA;IAAA,QAxBF,eAgCE,QAAC,MAAD;MACE,OAAO,EAAC,WADV;MAEE,IAAI,EAAC,OAFP;MAGE,KAAK,EAAE;QAAEC,eAAe,EAAE;MAAnB,CAHT;MAIE,OAAO,EAAEb,YAJX;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAhCF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2CD,CAnFD;;GAAMT,M;;KAAAA,M;AAqFN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}